name: Build Test Publish

on:
  push:
    branches:
    - "*"  # run for branches
    tags:
    - "*"  # run for tags

jobs:
  build-test-artifacts:
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: Build artifacts
      uses: ./.github/actions/build_artifacts

    # Docker actions run as root, fix ownership of _dist
    - name: Fix owner
      run: |
        sudo chown -R `id -u`:`id -g` ./quickstart/_dist

    - name: 'Upload artifacts'
      uses: actions/upload-artifact@v2
      with:
        name: test-artifacts
        path: ./quickstart/_dist

  build-image:
    runs-on: ubuntu-latest
    needs: [build-test-artifacts]
    strategy:
      matrix:
        starter: ["multi-cloud", "aks", "eks", "gke" ,"kind"]

    steps:
    - name: 'Checkout'
      uses: actions/checkout@v1

    - name: 'Download test-artifacts'
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ./quickstart/_dist

    - name: 'Docker login'
      run: |
        echo ${{ secrets.DOCKER_AUTH }} | docker login --username kbstci --password-stdin

    - name: Build ${{ matrix.starter }} image
      env:
        DOCKER_BUILDKIT: 1
      run: |
        docker run \
          --rm \
          --privileged \
          -v `pwd`:/tmp/work \
          -v $HOME/.docker:/root/.docker \
          --entrypoint buildctl-daemonless.sh \
          moby/buildkit:master \
              build \
              --frontend dockerfile.v0 \
              --local context=/tmp/work \
              --local dockerfile=/tmp/work/oci \
              --output type=image,name=kubestack/framework-dev:test-${{ github.sha }}-${{ matrix.starter }},push=true \
              --export-cache type=registry,ref=kubestack/framework-dev:buildcache-${{ matrix.starter }},push=true \
              --import-cache type=registry,ref=kubestack/framework-dev:buildcache-${{ matrix.starter }} \
              --opt target=${{ matrix.starter }}

  test:
    runs-on: ubuntu-latest
    needs: [build-test-artifacts, build-image]
    strategy:
      fail-fast: false
      matrix:
        starter: ["multi-cloud", "aks", "eks", "gke" ,"kind"]

    steps:
    - name: 'Download test-artifacts'
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ./quickstart/_dist

    - name: 'Unzip ${{ matrix.starter }} quickstart'
      run: |
        unzip quickstart/_dist/kubestack-starter-${{ matrix.starter }}-*.zip

    - name: 'Docker build'
      env:
        DOCKER_BUILDKIT: 1
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      # retagging here is necessary because we only push images
      # to kubestack/framework after they have been tested
      # but the Dockerfiles in the artifact have the target image name
      run: |
        SOURCE_IMAGE=kubestack/framework-dev:test-${{ github.sha }}-${{ matrix.starter }}
        docker pull $SOURCE_IMAGE
        TARGET_IMAGE=$(cat Dockerfile | sed 's/FROM //')
        docker tag $SOURCE_IMAGE $TARGET_IMAGE
        docker build -t test-image:${{ github.sha }} .

    - name: 'Configure Kubestack for ${{ matrix.starter }}'
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      run: |
        # ALL: set name_prefix
        sed -i 's/name_prefix = ""/name_prefix = "test"/g' config.auto.tfvars

        # ALL: set base_domain
        sed -i 's/base_domain = ""/base_domain = "infra.serverwolken.de"/g' config.auto.tfvars

        # AKS: set resource_group
        sed -i 's/resource_group = ""/resource_group = "terraform-kubestack-testing"/g' config.auto.tfvars

        # EKS: set region
        sed -i 's/region = ""/region = "eu-west-1"/g' providers.tf || true

        # EKS: set cluster_availability_zones
        sed -i 's/cluster_availability_zones = ""/cluster_availability_zones = "eu-west-1a,eu-west-1b"/g' config.auto.tfvars

        # GKE: set project_id
        sed -i 's/project_id = ""/project_id = "terraform-kubestack-testing"/g' config.auto.tfvars

        # GKE: set region
        sed -i 's/region = ""/region = "europe-west1"/g' config.auto.tfvars

        # GKE: set cluster_node_locations
        sed -i 's/cluster_node_locations = ""/cluster_node_locations = "europe-west1-b,europe-west1-c,europe-west1-d"/g' config.auto.tfvars

    - name: 'Terraform init'
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      run: |
        docker run --rm \
          -v `pwd`:/infra \
          test-image:${{ github.sha }} \
          terraform init

    - name: 'Terraform workspace new ops'
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      run: |
        docker run --rm \
          -v `pwd`:/infra \
          test-image:${{ github.sha }} \
          terraform workspace new ops

    - name: 'Terraform validate'
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      run: |
        docker run --rm \
          -v `pwd`:/infra \
          test-image:${{ github.sha }} \
          terraform validate

    - name: 'Terraform plan'
      working-directory: ./kubestack-starter-${{ matrix.starter }}
      env:
        KBST_AUTH_AWS: ${{ secrets.KBST_AUTH_AWS }}
        KBST_AUTH_AZ: ${{ secrets.KBST_AUTH_AZ }}
        KBST_AUTH_GCLOUD: ${{ secrets.KBST_AUTH_GCLOUD }}
      run: |
        docker run --rm \
          -e KBST_AUTH_AWS \
          -e KBST_AUTH_AZ \
          -e KBST_AUTH_GCLOUD \
          -v `pwd`:/infra \
          -v /var/run/docker.sock:/var/run/docker.sock \
          test-image:${{ github.sha }} \
          terraform plan

  publish-image:
    runs-on: ubuntu-latest
    needs: [test]

    strategy:
      matrix:
        starter: ["multi-cloud", "aks", "eks", "gke" ,"kind"]

    steps:
    - name: 'Download test-artifacts'
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ./quickstart/_dist

    - name: 'Docker login'
      run: |
        echo ${{ secrets.DOCKER_AUTH }} | docker login --username kbstci --password-stdin

    - name: 'Docker push'
      # pull the image built for testing
      # retag it as the image specified in the artifact
      # push the new image with the new tag
      run: |
        SOURCE_IMAGE=kubestack/framework-dev:test-${{ github.sha }}-${{ matrix.starter }}
        docker pull $SOURCE_IMAGE
        TARGET_IMAGE=$(cat quickstart/_dist/kubestack-starter-${{ matrix.starter }}/Dockerfile | sed 's/FROM //')
        docker tag $SOURCE_IMAGE $TARGET_IMAGE
        docker push $TARGET_IMAGE

  publish-starter:
    runs-on: ubuntu-latest
    # only publish the artifacts when tests passed and images are pushed
    # because publishing the starter is what makes a release public
    needs: [test, publish-image]

    strategy:
      matrix:
        starter: ["multi-cloud", "aks", "eks", "gke" ,"kind"]

    steps:
    - name: 'Download test-artifacts'
      uses: actions/download-artifact@v2
      with:
        name: test-artifacts
        path: ./quickstart/_dist

    - name: 'Setup gcloud'
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCLOUD_AUTH }}

    - name: 'Publish ${{ matrix.starter }} starter'
      run: |
        SOURCE_FILE=quickstart/_dist/kubestack-starter-${{ matrix.starter }}-${{ github.sha }}.zip
        TARGET_BUCKET=dev.quickstart.kubestack.com
        if [[ $GITHUB_REF = refs/tags/v* ]]
        then
          VERSION=$(echo $GITHUB_REF | sed -e "s#^refs/tags/##")
          SOURCE_FILE=quickstart/_dist/kubestack-starter-${{ matrix.starter }}-${VERSION}.zip
          TARGET_BUCKET=quickstart.kubestack.com
        fi
        gsutil -m cp $SOURCE_FILE gs://$TARGET_BUCKET
